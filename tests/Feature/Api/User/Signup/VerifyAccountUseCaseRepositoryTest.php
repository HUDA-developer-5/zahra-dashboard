<?php

namespace Tests\Feature\Api\User\Signup;

use App\DTOs\Screening\ReturnHTTPScreeningRequestDTO;
use App\Enums\User\UserProfileStatusEnum;
use App\Exceptions\SignupException;
use App\Models\User;
use App\Repositories\Api\V1\User\Auth\UseCases\VerifyAccountUseCaseRepository;
use App\Services\Api\V1\Screening\Providers\Focal\FocalHttpRequestService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class VerifyAccountUseCaseRepositoryTest extends TestCase
{
    use WithFaker, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Artisan::call('passport:install --force');
    }

    public function test_verify_account_use_case_repository_user_verified_from_absher_and_data_matched()
    {
        // create user
        $user = User::factory()->create();

        // mark user as verified from absher
        $user = $user->markUserAsVerifiedFromAbsher($user);
        $user = $user->markUserAsDataMatched($user);
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'email' => $user->email,
            'national_id' => $user->national_id,
            'phone_number' => $user->phone_number,
            'is_verified_from_absher' => true,
            'is_data_matched' => true
        ]);

        try {
            (new VerifyAccountUseCaseRepository())->verify($user, '123456');
        } catch (SignupException $exception) {
            $this->assertEquals(400, $exception->getCode());
            $this->assertEquals(trans('api_v1.verification.user_already_verified'), $exception->getMessage());
            return;
        }
        $this->fail('Expected SignupException was not thrown.');
    }

    public function test_verify_account_use_case_repository_user_verified_from_absher_and_data_not_matched()
    {
        // create user
        $user = User::factory()->create();

        // mark user as verified from absher
        $user = $user->markUserAsVerifiedFromAbsher($user);
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'email' => $user->email,
            'national_id' => $user->national_id,
            'phone_number' => $user->phone_number,
            'is_verified_from_absher' => true
        ]);
        $returnVerifyAccountUseCaseDTO = (new VerifyAccountUseCaseRepository())->verify($user, '123456');
        $this->assertNotNull($returnVerifyAccountUseCaseDTO);
        $this->assertNotNull($returnVerifyAccountUseCaseDTO->user);
        $this->assertEquals(trans('api_v1.verification.enter_valid_data'), $returnVerifyAccountUseCaseDTO->message);
        $this->assertEquals(UserProfileStatusEnum::ENTER_VALID_DATA, $returnVerifyAccountUseCaseDTO->userProfileStatusEnum);
    }

//    public function test_verify_account_use_case_repository_verify_request_OTP_provider_mock_send_OTP_valid_return()
//    {
//        // create user
//        $user = User::factory()->create();
//
//        // mark user data matched
//        $this->assertDatabaseHas('users', [
//            'id' => $user->id,
//            'email' => $user->email,
//            'national_id' => $user->national_id,
//            'phone_number' => $user->phone_number,
//            'is_verified_from_absher' => null,
//            'is_data_matched' => null
//        ]);
//
//        // Create a mock of the service class
//        $mock = \Mockery::mock(FocalHttpRequestService::class);
//
//        // Define the expected behavior of the mocked method
//        $mock->shouldAllowMockingProtectedMethods();
//        $mock->shouldReceive('sendOTP')
//            ->once()
//            ->andReturn(ReturnHTTPScreeningRequestDTO::from([
//                'response_status_code' => 200,
//                'response_data' => [
//                    'iden' => $user->national_id,
//                    'dob'  => $user->date_of_birth,
//                ],
//                'request_data' => []
//            ]));
//
//        // Replace the instance of the dependency with the mock
//        $this->app->instance(FocalHttpRequestService::class, $mock);
//
//        $returnVerifyAccountUseCaseDTO = (new VerifyAccountUseCaseRepository())->verify($user, '123456');
//        $this->assertNotNull($returnVerifyAccountUseCaseDTO);
//        $this->assertNotNull($returnVerifyAccountUseCaseDTO->user);
//        $this->assertEquals(trans('api_v1.verification.enter_valid_data'), $returnVerifyAccountUseCaseDTO->message);
//        $this->assertEquals(UserProfileStatusEnum::ENTER_VALID_DATA, $returnVerifyAccountUseCaseDTO->userProfileStatusEnum);
//    }
}
